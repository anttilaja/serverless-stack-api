{"ast":null,"code":"import \"source-map-support/register\";\nimport * as uuid from \"uuid\";\nimport AWS from \"aws-sdk\";\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nexport function main(event, context, callback) {\n  // Request body is passed in as a JSON encoded string in 'event.body'\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Item' contains the attributes of the item to be created\n    // - 'userId': user identities are federated through the\n    //             Cognito Identity Pool, we will use the identity id\n    //             as the user id of the authenticated user\n    // - 'noteId': a unique uuid\n    // - 'content': parsed from request body\n    // - 'attachment': parsed from request body\n    // - 'createdAt': current Unix timestamp\n    Item: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: uuid.v1(),\n      content: data.content,\n      attachment: data.attachment,\n      createdAt: Date.now()\n    }\n  };\n  console.log(JSON.stringify(params));\n  dynamoDb.put(params, (error, data) => {\n    // Set response headers to enable CORS (Cross-Origin Resource Sharing)\n    const headers = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true\n    }; // Return status code 500 on error\n\n    if (error) {\n      const response = {\n        statusCode: 500,\n        headers: headers,\n        body: JSON.stringify(error) + JSON.stringify({\n          status: false\n        })\n      };\n      callback(null, response);\n      return;\n    } // Return status code 200 and the newly created item\n\n\n    const response = {\n      statusCode: 200,\n      headers: headers,\n      body: JSON.stringify(params.Item)\n    };\n    callback(null, response);\n  });\n}","map":{"version":3,"sources":["/home/ubunturemote/devprojects/node/notes-app-api/create.js"],"names":["uuid","AWS","dynamoDb","DynamoDB","DocumentClient","main","event","context","callback","data","JSON","parse","body","params","TableName","process","env","tableName","Item","userId","requestContext","identity","cognitoIdentityId","noteId","v1","content","attachment","createdAt","Date","now","console","log","stringify","put","error","headers","response","statusCode","status"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAOC,GAAP,MAAgB,SAAhB;AAEA,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAACE,QAAJ,CAAaC,cAAjB,EAAjB;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AAC7C;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,IAAjB,CAAb;AAEA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADV;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEb,KAAK,CAACc,cAAN,CAAqBC,QAArB,CAA8BC,iBADlC;AAEJC,MAAAA,MAAM,EAAEvB,IAAI,CAACwB,EAAL,EAFJ;AAGJC,MAAAA,OAAO,EAAEhB,IAAI,CAACgB,OAHV;AAIJC,MAAAA,UAAU,EAAEjB,IAAI,CAACiB,UAJb;AAKJC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AALP;AAVO,GAAf;AAkBAC,EAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAI,CAACsB,SAAL,CAAenB,MAAf,CAAZ;AACAX,EAAAA,QAAQ,CAAC+B,GAAT,CAAapB,MAAb,EAAqB,CAACqB,KAAD,EAAQzB,IAAR,KAAiB;AACpC;AACA,UAAM0B,OAAO,GAAG;AACd,qCAA+B,GADjB;AAEd,0CAAoC;AAFtB,KAAhB,CAFoC,CAOpC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAME,QAAQ,GAAG;AACfC,QAAAA,UAAU,EAAE,GADG;AAEfF,QAAAA,OAAO,EAAEA,OAFM;AAGfvB,QAAAA,IAAI,EAAEF,IAAI,CAACsB,SAAL,CAAeE,KAAf,IAAwBxB,IAAI,CAACsB,SAAL,CAAe;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAAf;AAHf,OAAjB;AAKA9B,MAAAA,QAAQ,CAAC,IAAD,EAAO4B,QAAP,CAAR;AACA;AACD,KAhBmC,CAkBpC;;;AACA,UAAMA,QAAQ,GAAG;AACfC,MAAAA,UAAU,EAAE,GADG;AAEfF,MAAAA,OAAO,EAAEA,OAFM;AAGfvB,MAAAA,IAAI,EAAEF,IAAI,CAACsB,SAAL,CAAenB,MAAM,CAACK,IAAtB;AAHS,KAAjB;AAKAV,IAAAA,QAAQ,CAAC,IAAD,EAAO4B,QAAP,CAAR;AACD,GAzBD;AA0BD","sourcesContent":["import * as uuid from \"uuid\";\nimport AWS from \"aws-sdk\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nexport function main(event, context, callback) {\n  // Request body is passed in as a JSON encoded string in 'event.body'\n  const data = JSON.parse(event.body);\n\n  const params = {\n    TableName: process.env.tableName,\n    // 'Item' contains the attributes of the item to be created\n    // - 'userId': user identities are federated through the\n    //             Cognito Identity Pool, we will use the identity id\n    //             as the user id of the authenticated user\n    // - 'noteId': a unique uuid\n    // - 'content': parsed from request body\n    // - 'attachment': parsed from request body\n    // - 'createdAt': current Unix timestamp\n    Item: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: uuid.v1(),\n      content: data.content,\n      attachment: data.attachment,\n      createdAt: Date.now()\n    }\n  };\n  console.log(JSON.stringify(params));\n  dynamoDb.put(params, (error, data) => {\n    // Set response headers to enable CORS (Cross-Origin Resource Sharing)\n    const headers = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true\n    };\n\n    // Return status code 500 on error\n    if (error) {\n      const response = {\n        statusCode: 500,\n        headers: headers,\n        body: JSON.stringify(error) + JSON.stringify({ status: false })\n      };\n      callback(null, response);\n      return;\n    }\n\n    // Return status code 200 and the newly created item\n    const response = {\n      statusCode: 200,\n      headers: headers,\n      body: JSON.stringify(params.Item)\n    };\n    callback(null, response);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}